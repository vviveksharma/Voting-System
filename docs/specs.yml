openapi: 3.0.0
info:
  title: Voting System API
  description: Voting System using BlockChain API's for both Admin and User
  version: 1.0.0
  contact:
    name: Vivek Sharma
    email: sharmavivek1709@gmail.com

tags:
  - name: Users
    description: Operations related to users
  - name: Admin
    description: Operation related to the Admin
  - name: All
    description: Api's that both User and Admin can see

paths:
  /register:
    post:
      summary: Register the user on the DataBase
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - username
                - email
                - password
      tags:
        - Users
      responses:
        "200":
          description: Successful registeration
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Please validate the token from the given Email

        "409":
          description: CONFLICT (User already exists)
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: User already exist please login

  /login:
    post:
      summary: Use to login the user inside the system.
      description: User login credentials expecting user has already validated the token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                voterID:
                  type: string
                  example: 0000-0000-0000-0000
      tags:
        - Users
      responses:
        "200":
          description: Flow to the login screen.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login Successfull
        "409":
          description: User has not validated the token
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: Please validate the token

  /validate-token:
    post:
      summary: Validate the token.
      description: Validating the token given at the time of login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: abcdef45

      tags:
        - Users
      responses:
        "200":
          description: Successfull
          content:
            application/json:
              schema:
                type: object
                properties:
                  VoterId:
                    type: string
                    example: 0000-00000-0000-000
        "400":
          description: BAD REQUEST
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: Token entered is wrong

  /cast-vote:
    post:
      summary: Casting the vote on the basis options
      requestBody:
        description: Candidate options
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                candidateName:
                  type: string
                  example: BJP
      tags:
        - Users
      responses:
        "200":
          description: Successful registeration
          content:
            application/json:
              schema:
                type: object
                properties:
                  acknowledgment:
                    type: string
                    example: Your vote is saved successfully
        "400":
          description: Unable to get the UserId
          content:
            application/json:
              schema:
                type: object
                properties:
                  acknowledgment:
                    type: string
                    example: Unable to find the candidate provided

  /admin:
    post:
      summary: Super Admin to add the Admin candidate
      requestBody:
        description: Enter the UUID access-Key
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                adminId:
                  type: string
                  example: 000-0000-000-0000
              required:
                - adminId
      tags:
        - Admin
      responses:
        "200":
          description: Sucess
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: Success
        "400":
          description: Failure
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: You dont have the access to enter as an Admin

  /admin/register:
    post:
      summary: Register the user on the DataBase
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                govtId:
                  type: string
              required:
                - username
                - email
                - password
                - govtId
      tags:
        - Admin
      responses:
        "200":
          description: Successful registeration
          content:
            application/json:
              schema:
                type: object
                properties:
                  loginID:
                    type: string
                    example: 123456

        "409":
          description: Government Employee is not verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: User is not a government Employee

        "400":
          description: CONFLICT (Government Employee already exists)
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: Admin Id already exist please login

  /admin/login:
    post:
      summary: Login as Admin (Check in DB if he has access to login as the Admin)
      requestBody:
        description: Enter the government assigned VoterId
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                loginId:
                  type: string
                  example: 000-0000-000-0000
              required:
                - loginId
      tags:
        - Admin
      responses:
        "200":
          description: Successful Login
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: Login Successfull

        "400":
          description: Wrong ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: Employee not found

  /admin/role/{govtId}:
    put:
      summary: Giving the employee the role they wanted
      parameters:
        - name: govtId
          in: path
          required: true
          schema:
            type: string

      tags:
        - Admin
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: Role provided

  /admin/open-vote:
    post:
      description: Admin can open the Voting lines
      summary: Power to open voting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                response:
                  type: string
                  example: Vote opened
                expiration:
                  type: string
                  example: 2023-10-2003
      tags:
        - Admin
      responses:
        "200":
          description: Success

  /get-results:
    get:
      summary: API to get counts of votes/ Winner of the election
      tags:
        - All
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  Name:
                    type: string
                    example: BJP
                  VoteCount:
                    type: integer
                    example: 100

  /admin/add-candidate:
    post:
      description: Adding the candidate in the DataBase
      summary: Add a party as a candidate for elections
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                  example: BJP
                Image:
                  type: string
                  example: image.jpg
      tags:
        - Admin
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: BJP entered Successfully
        "409":
          description: Candidate is already in the DataBase
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: Entry is already there
